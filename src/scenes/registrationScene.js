// src/scenes/registrationScene.js
const { Scenes, Markup } = require("telegraf");
const { UKRAINE_OBLASTS } = require("../utils/constants");
const mainMenu = require("../keyboards/mainMenu");

const createRegistrationWizard = (supabase) => {
  const registrationWizard = new Scenes.WizardScene(
    "registrationWizard",

    // –ö—Ä–æ–∫ 1: –Ü–º'—è
    async (ctx) => {
      await ctx.reply("–í—ñ—Ç–∞—é! üëã ...–Ø–∫ —è –º–æ–∂—É –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?");
      return ctx.wizard.next();
    },

    // –ö—Ä–æ–∫ 2: –¢–µ–ª–µ—Ñ–æ–Ω
    async (ctx) => {
      if (!ctx.message?.text) {
        await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è.");
        return;
      }
      ctx.wizard.state.name = ctx.message.text;
      await ctx.reply(
        `–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, ${ctx.wizard.state.name}!\n–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.`,
        Markup.keyboard([
          Markup.button.contactRequest("üì± –ù–∞–¥–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"),
        ])
          .resize()
          .oneTime()
      );
      return ctx.wizard.next();
    },

    // –ö—Ä–æ–∫ 3: –û–±–ª–∞—Å—Ç—å
    async (ctx) => {
      const phone = ctx.message?.contact?.phone_number || ctx.message?.text;
      if (!phone) {
        await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.");
        return;
      }
      ctx.wizard.state.phone = phone;

      const buttons = UKRAINE_OBLASTS.reduce((acc, o) => {
        if (acc.length === 0 || acc[acc.length - 1].length === 3) acc.push([]);
        acc[acc.length - 1].push(o);
        return acc;
      }, []);

      await ctx.reply(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É –æ–±–ª–∞—Å—Ç—å.",
        Markup.keyboard(buttons).resize().oneTime()
      );
      return ctx.wizard.next();
    },

    // --- –ù–û–í–ò–ô –ö–†–û–ö 4: –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ---
    async (ctx) => {
      const oblast = ctx.message?.text;
      if (!oblast || !UKRAINE_OBLASTS.includes(oblast)) {
        await ctx.reply(
          "‚õîÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å! –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."
        );
        return;
      }
      ctx.wizard.state.oblast = oblast;

      await ctx.reply(
        '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é (–Ω–∞–ø—Ä., "–û—Ü—ñ–Ω–∫–∞", "–§–æ—Ç–æ—Ñ—ñ–∫—Å–∞—Ü—ñ—è", "–ê—É–¥–∏—Ç", ""). –¶–µ –¥–æ–ø–æ–º–æ–∂–µ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è–º –∑–Ω–∞–π—Ç–∏ –≤–∞—Å.',
        Markup.keyboard([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]])
          .resize()
          .oneTime()
      );
      return ctx.wizard.next();
    },

    // --- –ù–û–í–ò–ô –ö–†–û–ö 5: –ë—ñ–æ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) ---
    async (ctx) => {
      const specialization = ctx.message?.text;
      if (specialization && specialization !== "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏") {
        ctx.wizard.state.specialization = specialization;
      }
      await ctx.reply(
        "–ù–∞–ø–∏—à—ñ—Ç—å –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ —Å–µ–±–µ, –≤–∞—à –¥–æ—Å–≤—ñ–¥. –¶–µ –≤–∞—à–µ –º—ñ–Ω—ñ-—Ä–µ–∑—é–º–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤).",
        Markup.keyboard([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]])
          .resize()
          .oneTime()
      );
      return ctx.wizard.next();
    },

    // --- –ö—Ä–æ–∫ 6 (—Å—Ç–∞—Ä–∏–π –∫—Ä–æ–∫ 4): –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ –≤ –ë–î ---
    async (ctx) => {
      const bio = ctx.message?.text;
      if (bio && bio !== "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏") {
        ctx.wizard.state.bio = bio;
      }

      const {
        name,
        phone,
        oblast,
        specialization,
        bio: userBio,
      } = ctx.wizard.state;
      const telegramId = ctx.from.id;

      let oblastsToSave = [oblast];
      if (oblast === "–í—Å—è –£–∫—Ä–∞—ó–Ω–∞") {
        oblastsToSave = UKRAINE_OBLASTS.filter((o) => o !== "–í—Å—è –£–∫—Ä–∞—ó–Ω–∞");
      }

      await ctx.reply("–•–≤–∏–ª–∏–Ω–∫—É, —Ä–µ—î—Å—Ç—Ä—É—é –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å...");
      try {
        const { error } = await supabase.from("profiles").insert([
          {
            telegram_id: telegramId,
            contact_name: name,
            contact_phone: phone,
            search_oblast: oblastsToSave,
            specialization: specialization || null, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ null, —è–∫—â–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
            bio: userBio || null,
          },
        ]);
        if (error) throw error;
        await ctx.reply("‚úÖ –í—ñ—Ç–∞—é, –≤–∞—Å —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!", mainMenu);
      } catch (dbError) {
        console.error("Error saving profile:", dbError);
        await ctx.reply("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.");
      }
      return ctx.scene.leave();
    }
  );
  return registrationWizard;
};
module.exports = createRegistrationWizard;
