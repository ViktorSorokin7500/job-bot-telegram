// src/bot.js
require("dotenv").config({ path: "./.env" }); // –®–ª—è—Ö –¥–æ .env, —è–∫—â–æ –≤—ñ–Ω –ª–µ–∂–∏—Ç—å –≤ –ø–∞–ø—Ü—ñ src
const createEditProfileWizard = require("./scenes/editProfileScene");

const { Telegraf, Scenes, session, Markup } = require("telegraf");
const { createClient } = require("@supabase/supabase-js");
// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –§–£–ù–ö–¶–Ü–Æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
const createRegistrationWizard = require("./scenes/registrationScene");
const mainMenu = require("./keyboards/mainMenu");
const createAdWizard = require("./scenes/createAdScene");
const createEditAdWizard = require("./scenes/editAdScene");
const { UKRAINE_OBLASTS } = require("./utils/constants");

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
console.log("Starting bot...");

const formatAdMessage = (ad, currentIndex, total) => {
  return [
    `üìÑ ${ad.title} (${currentIndex + 1}/${total})`,
    ``,
    `${ad.description}`,
    ``,
    `üìç –û–±–ª–∞—Å—Ç—å: ${ad.oblasts.join(", ")}`,
    `üë§ –ö–æ–Ω—Ç–∞–∫—Ç: ${ad.profiles.contact_name}`,
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${ad.profiles.contact_phone}`,
  ].join("\n");
};

const formatMyAdMessage = (ad, currentIndex, total) => {
  return [
    `üìÑ ${ad.title} (${currentIndex + 1}/${total})`,
    ``,
    `${ad.description}`,
    ``,
    `üìç –û–±–ª–∞—Å—Ç—å: ${ad.oblasts.join(", ")}`,
    `üìÖ –ê–∫—Ç–∏–≤–Ω–æ –¥–æ: ${new Date(ad.expires_at).toLocaleDateString("uk-UA")}`,
  ].join("\n");
};

const formatWorkerMessage = (worker, currentIndex, total) => {
  return [
    `üë§ ${worker.contact_name} (${currentIndex + 1}/${total})`,
    ``,
    `–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: ${worker.specialization || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`,
    `–ü—Ä–æ —Å–µ–±–µ: ${worker.bio || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`,
    ``,
    `üìç –®—É–∫–∞—î –≤: ${worker.search_oblast.join(", ")}`,
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${worker.contact_phone}`,
  ].join("\n");
};

const createPaginationKeyboard = (type, resultsLength) => {
  const prev_action = `prev_${type}`; // 'prev_ad' –∞–±–æ 'prev_worker'
  const next_action = `next_${type}`; // 'next_ad' –∞–±–æ 'next_worker'

  return Markup.inlineKeyboard([
    [
      Markup.button.callback("‚¨ÖÔ∏è", prev_action, resultsLength <= 1),
      Markup.button.callback("‚û°Ô∏è", next_action, resultsLength <= 1),
    ],
    [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_menu")],
  ]);
};

const createMyAdsPaginationKeyboard = (adId, totalAds) => {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", `edit_ad:${adId}`),
      Markup.button.callback("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", `delete_ad:${adId}`),
    ],
    [
      Markup.button.callback("‚¨ÖÔ∏è", "prev_my_ad", totalAds <= 1),
      Markup.button.callback("‚û°Ô∏è", "next_my_ad", totalAds <= 1),
    ],
  ]);
};

const handleMyAdsPagination = async (ctx, direction) => {
  if (!ctx.session?.myAds || ctx.session.myAds.length === 0) {
    return ctx.answerCbQuery("–°–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å –∑–∞—Å—Ç–∞—Ä—ñ–≤.", true);
  }

  let { myAdsIndex, myAds } = ctx.session;

  if (direction === "next") {
    myAdsIndex = (myAdsIndex + 1) % myAds.length;
  } else {
    myAdsIndex = (myAdsIndex - 1 + myAds.length) % myAds.length;
  }
  ctx.session.myAdsIndex = myAdsIndex;

  const ad = myAds[myAdsIndex];
  const message = formatMyAdMessage(ad, myAdsIndex, myAds.length);

  try {
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      ...createMyAdsPaginationKeyboard(ad.id, myAds.length),
    });
  } catch (e) {
    if (!e.message.includes("message is not modified")) console.error(e);
  } finally {
    await ctx.answerCbQuery();
  }
};

if (
  !process.env.BOT_TOKEN ||
  !process.env.SUPABASE_URL ||
  !process.env.SUPABASE_ANON_KEY
) {
  console.error("ERROR: Missing environment variables!");
  process.exit(1);
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

const handlePagination = async (ctx, direction, type) => {
  if (!ctx.session?.searchResults || ctx.session.searchResults.length === 0) {
    await ctx.answerCbQuery("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏.");
    return ctx.editMessageText("–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤–∏–π –ø–æ—à—É–∫.");
  }

  const { searchResults } = ctx.session;
  let { currentIndex } = ctx.session;

  if (direction === "next") {
    currentIndex = (currentIndex + 1) % searchResults.length;
  } else {
    currentIndex =
      (currentIndex - 1 + searchResults.length) % searchResults.length;
  }
  ctx.session.currentIndex = currentIndex;

  const item = searchResults[currentIndex];
  // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
  const message =
    type === "ad"
      ? formatAdMessage(item, currentIndex, searchResults.length)
      : formatWorkerMessage(item, currentIndex, searchResults.length);

  try {
    await ctx.editMessageText(message, {
      parse_mode: "HTML",
      ...createPaginationKeyboard(type, searchResults.length),
    });
  } catch (e) {
    if (!e.message.includes("message is not modified")) {
      console.error("Error on pagination:", e);
    }
  } finally {
    await ctx.answerCbQuery();
  }
};

const bot = new Telegraf(process.env.BOT_TOKEN);

// --- –°–¢–í–û–†–ï–ù–ù–Ø –¢–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –°–¶–ï–ù–ò (–û–°–¨ –¢–£–¢ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø) ---
// 1. –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é-—Ñ–∞–±—Ä–∏–∫—É —ñ –ø–µ—Ä–µ–¥–∞—î–º–æ —ó–π supabase, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–æ—Ç–æ–≤–∏–π –æ–±'—î–∫—Ç —Å—Ü–µ–Ω–∏
const registrationScene = createRegistrationWizard(supabase);
const editProfileScene = createEditProfileWizard(supabase);
const createAdScene = createAdWizard(supabase);
const editAdScene = createEditAdWizard(supabase);

// 2. –†–µ—î—Å—Ç—Ä—É—î–º–æ –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π –æ–±'—î–∫—Ç —Å—Ü–µ–Ω–∏ —É Stage
const stage = new Scenes.Stage([
  registrationScene,
  editProfileScene,
  createAdScene,
  editAdScene,
]);

stage.command("cancel", async (ctx) => {
  await ctx.reply("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", mainMenu);
  return ctx.scene.leave();
});

const checkSubscription = async (ctx, next) => {
  try {
    const { data: profile, error } = await supabase
      .from("profiles")
      .select("subscription_end_date")
      .eq("telegram_id", ctx.from.id)
      .single();

    if (error || !profile) {
      // –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏
      return ctx.reply(
        "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ /start."
      );
    }

    const subscriptionEndDate = new Date(profile.subscription_end_date);
    const now = new Date();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –±—ñ–ª—å—à–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
    if (subscriptionEndDate > now) {
      // –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó (–æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞)
      return next();
    } else {
      // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –±–ª–æ–∫—É—î–º–æ
      const paymentLink = "https://www.liqpay.ua/checkout/..."; // –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ù–ê –í–ê–®–ï –†–ï–ê–õ–¨–ù–ï –ü–û–°–ò–õ–ê–ù–ù–Ø

      await ctx.replyWithHTML(
        "üî¥ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è.\n\n" +
          "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –ø–æ—à—É–∫—É —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å, " +
          `–±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–ª–∞—Ç—ñ—Ç—å 50 –≥—Ä–Ω/—Ä—ñ–∫.`,
        Markup.inlineKeyboard([
          [Markup.button.url("üí≥ –°–ø–ª–∞—Ç–∏—Ç–∏ 50 –≥—Ä–Ω", paymentLink)],
          [Markup.button.callback("–Ø –≤–∂–µ —Å–ø–ª–∞—Ç–∏–≤(–ª–∞)", "check_payment_later")], // –ö–Ω–æ–ø–∫–∞ –Ω–∞ –º–∞–π–±—É—Ç–Ω—î
        ])
      );
    }
  } catch (e) {
    console.error("Subscription check error:", e);
    await ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞—à–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏.");
  }
};

bot.use(session());
bot.use(stage.middleware());

// --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
bot.start(async (ctx) => {
  const telegramId = ctx.from.id;
  console.log(`User with Telegram ID ${telegramId} started the bot.`);

  try {
    const { data, error } = await supabase
      .from("profiles")
      .select("id, is_active")
      .eq("telegram_id", telegramId)
      .single();

    if (error && error.code !== "PGRST116") throw error;

    if (data) {
      console.log(
        `User found in DB. ID: ${data.id}, Is Active: ${data.is_active}`
      );
      await ctx.reply(`–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, ${ctx.from.first_name}!`, mainMenu);
      // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    } else {
      console.log("New user. Entering registration scene...");
      await ctx.scene.enter("registrationWizard");
    }
  } catch (dbError) {
    console.error("Database error on /start:", dbError);
    await ctx.reply(
      "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    );
  }
});

bot.hears("‚öôÔ∏è –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", async (ctx) => {
  const telegramId = ctx.from.id;

  try {
    const { data: profile, error } = await supabase
      .from("profiles")
      .select("*")
      .eq("telegram_id", telegramId)
      .single();

    if (error || !profile) {
      await ctx.reply(
        "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ /start."
      );
      throw new Error(error?.message || "Profile not found");
    }

    // --- –ù–æ–≤–∞ –¥–∏–Ω–∞–º—ñ—á–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
    let statusMessage, visibilityButton;

    if (profile.is_active) {
      statusMessage =
        "üü¢ –°—Ç–∞—Ç—É—Å: –í–∏–¥–∏–º–∏–π (–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –≤ –ø–æ—à—É–∫—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤)";
      visibilityButton = Markup.button.callback(
        "üî¥ –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –∑ –ø–æ—à—É–∫—É",
        "hide_profile"
      );
    } else {
      statusMessage = "üî¥ –°—Ç–∞—Ç—É—Å: –ü—Ä–∏—Ö–æ–≤–∞–Ω–∏–π (–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –≤ –ø–æ—à—É–∫—É)";
      visibilityButton = Markup.button.callback(
        "üü¢ –ó—Ä–æ–±–∏—Ç–∏ –≤–∏–¥–∏–º–∏–º",
        "unhide_profile"
      );
    }
    const profileMessage = [
      `üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å`,
      ``,
      `–Ü–º'—è: ${profile.contact_name}`,
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${profile.contact_phone}`,
      `–û—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å: ${profile.search_oblast.join(", ")}`,
      `–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: ${profile.specialization || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`,
      `–ü—Ä–æ —Å–µ–±–µ: ${profile.bio || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}`,
      ``,
      statusMessage, // –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º
      ``,
      `üìÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: ${new Date(
        profile.subscription_end_date
      ).toLocaleDateString("uk-UA")}`,
    ].join("\n");

    await ctx.replyWithHTML(
      profileMessage,
      Markup.inlineKeyboard([
        [visibilityButton], // –î–∏–Ω–∞–º—ñ—á–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
        [Markup.button.callback("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å", "edit_profile")],
      ])
    );
  } catch (e) {
    console.error("Error fetching profile:", e);
    await ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.");
  }
});

bot.action("edit_profile", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.editMessageText("–ü–µ—Ä–µ—Ö–æ–¥–∂—É –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è...");
  return ctx.scene.enter("editProfileWizard"); // –í—Ö–æ–¥–∏–º–æ –≤ —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
});

bot.action("hide_profile", async (ctx) => {
  try {
    const { error } = await supabase
      .from("profiles")
      .update({ is_active: false })
      .eq("telegram_id", ctx.from.id);

    if (error) throw error;

    await ctx.answerCbQuery("–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ –∑ –ø–æ—à—É–∫—É.");
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    await ctx.editMessageText(
      "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å —Ç–µ–ø–µ—Ä –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π —ñ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å —É –ø–æ—à—É–∫—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤."
    );
    await ctx.reply("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", mainMenu);
  } catch (e) {
    console.error("Error hiding profile:", e);
    await ctx.answerCbQuery("–ü–æ–º–∏–ª–∫–∞!", true);
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –≤–∏–¥–∏–º–∏–º"
bot.action("unhide_profile", async (ctx) => {
  try {
    const { error } = await supabase
      .from("profiles")
      .update({ is_active: true })
      .eq("telegram_id", ctx.from.id);

    if (error) throw error;

    await ctx.answerCbQuery("–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –∑–Ω–æ–≤—É –≤–∏–¥–∏–º–∏–π.");
    await ctx.editMessageText(
      "–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –∑–Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å —É –ø–æ—à—É–∫—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤."
    );
    await ctx.reply("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", mainMenu);
  } catch (e) {
    console.error("Error unhiding profile:", e);
    await ctx.answerCbQuery("–ü–æ–º–∏–ª–∫–∞!", true);
  }
});

bot.hears("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", checkSubscription, (ctx) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ —Ç—É—Ç –∑–≥–æ–¥–æ–º
  return ctx.scene.enter("createAdWizard");
});

bot.hears("üìÑ –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è", checkSubscription, async (ctx) => {
  try {
    const { data: profile } = await supabase
      .from("profiles")
      .select("id")
      .eq("telegram_id", ctx.from.id)
      .single();
    if (!profile) throw new Error("–ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");

    const { data: ads, error } = await supabase
      .from("advertisements")
      .select("*")
      .eq("author_id", profile.id)
      .eq("is_active", true)
      .gt("expires_at", new Date().toISOString());

    if (error) throw error;

    if (!ads || ads.length === 0) {
      return ctx.reply(
        "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.",
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è",
              "create_ad_from_list"
            ),
          ],
        ])
      );
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ —Å–µ—Å—ñ—é –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    ctx.session.myAds = ads;
    ctx.session.myAdsIndex = 0;

    const ad = ads[0];
    const message = formatMyAdMessage(ad, 0, ads.length);

    await ctx.replyWithHTML(
      message,
      createMyAdsPaginationKeyboard(ads[0].id, ads.length)
    );
  } catch (e) {
    console.error("Error fetching my ads:", e);
    await ctx.reply("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–∞—à–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.");
  }
});

// –î–æ–¥–∞–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
bot.action("create_ad_from_list", (ctx) => {
  ctx.answerCbQuery();
  return ctx.scene.enter("createAdWizard");
});

bot.hears("üîç –ó–Ω–∞–π—Ç–∏ —Ä–æ–±–æ—Ç—É", checkSubscription, async (ctx) => {
  ctx.session.search_type = "job";
  const oblastKeyboard = Markup.keyboard(
    UKRAINE_OBLASTS.map((o) => [o]),
    { columns: 3 }
  )
    .resize()
    .oneTime();

  await ctx.reply("–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:", oblastKeyboard);
});

bot.hears("üë§ –ó–Ω–∞–π—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", checkSubscription, async (ctx) => {
  ctx.session.search_type = "worker"; // <-- –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ, —â–æ —à—É–∫–∞—î–º–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
  const oblastKeyboard = Markup.keyboard(
    UKRAINE_OBLASTS.map((o) => [o]),
    { columns: 3 }
  )
    .resize()
    .oneTime();
  await ctx.reply("–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:", oblastKeyboard);
});

bot.hears(UKRAINE_OBLASTS, async (ctx) => {
  const selectedOblast = ctx.message.text;
  const searchType = ctx.session.search_type;

  if (!searchType) {
    return ctx.reply(
      "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —à—É–∫–∞—Ç–∏.",
      mainMenu
    );
  }

  await ctx.reply(
    `üîé –®—É–∫–∞—é –ø–æ –∑–∞–ø–∏—Ç—É –≤ –æ–±–ª–∞—Å—Ç—ñ "${selectedOblast}"...`,
    Markup.removeKeyboard()
  );

  try {
    if (searchType === "job") {
      // --- –õ–û–ì–Ü–ö–ê –ü–û–®–£–ö–£ –†–û–ë–û–¢–ò (–ó–ê–õ–ò–®–ê–Ñ–¢–¨–°–Ø –ë–ï–ó –ó–ú–Ü–ù) ---
      const query = supabase
        .from("advertisements")
        .select("*, profiles(contact_name, contact_phone)")
        .eq("is_active", true)
        .gt("expires_at", new Date().toISOString());

      if (selectedOblast !== "–í—Å—è –£–∫—Ä–∞—ó–Ω–∞") {
        query.contains("oblasts", [selectedOblast]);
      }

      const { data: ads, error } = await query;
      if (error) throw error;
      if (!ads || ads.length === 0)
        return ctx.reply("–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");

      ctx.session.searchResults = ads;
      ctx.session.currentIndex = 0;

      const ad = ads[0];
      const message = formatAdMessage(ad, 0, ads.length);
      await ctx.replyWithHTML(
        message,
        createPaginationKeyboard("ad", ads.length)
      );
    } else if (searchType === "worker") {
      // --- –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê –ü–û–®–£–ö–£ –ü–†–ê–¶–Ü–í–ù–ò–ö–Ü–í ---

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—à—É –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
      const { data: workers, error } = await supabase.rpc(
        "search_workers_sorted",
        {
          region: selectedOblast,
        }
      );

      if (error) throw error;
      if (!workers || workers.length === 0)
        return ctx.reply("–ù–∞ –∂–∞–ª—å, –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.");

      ctx.session.searchResults = workers;
      ctx.session.currentIndex = 0;

      const worker = workers[0];
      const message = formatWorkerMessage(worker, 0, workers.length);
      await ctx.replyWithHTML(
        message,
        createPaginationKeyboard("worker", workers.length)
      );
    }
  } catch (e) {
    console.error("Error during search:", e);
    await ctx.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É.");
  } finally {
    ctx.session.search_type = null;
  }
});

bot.action(/^delete_ad:(.+)$/, async (ctx) => {
  const adId = ctx.match[1];
  await ctx.answerCbQuery();
  await ctx.reply(
    "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.",
    Markup.inlineKeyboard([
      [
        Markup.button.callback(
          "–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–∑–∞–≤–∂–¥–∏",
          `confirm_delete_ad:${adId}`
        ),
        Markup.button.callback("–ù—ñ", "cancel_ad_deletion"),
      ],
    ])
  );
});

// –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
// –î–æ–¥–∞–Ω–æ ^ —Ç–∞ $ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
bot.action(/^confirm_delete_ad:(.+)$/, async (ctx) => {
  const adId = ctx.match[1];
  try {
    const { error } = await supabase
      .from("advertisements")
      .delete()
      .eq("id", adId);

    if (error) throw error;

    await ctx.answerCbQuery("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ.");
    await ctx.editMessageText("‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await ctx.reply("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", mainMenu);
  } catch (e) {
    console.error("Error deleting ad:", e);
    await ctx.answerCbQuery("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è!", true);
  }
});

// –û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
bot.action("cancel_ad_deletion", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.editMessageText("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
});

bot.action("next_ad", (ctx) => handlePagination(ctx, "next", "ad"));
bot.action("prev_ad", (ctx) => handlePagination(ctx, "prev", "ad"));
bot.action("next_worker", (ctx) => handlePagination(ctx, "next", "worker"));
bot.action("prev_worker", (ctx) => handlePagination(ctx, "prev", "worker"));
bot.action("next_my_ad", (ctx) => handleMyAdsPagination(ctx, "next"));
bot.action("prev_my_ad", (ctx) => handleMyAdsPagination(ctx, "prev"));

bot.command("menu", async (ctx) => {
  // –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
  await ctx.reply("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", mainMenu);
});

bot.action("back_to_menu", async (ctx) => {
  await ctx.answerCbQuery();
  // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º, —â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ —á–∞—Ç
  await ctx.deleteMessage();
  // –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
  await ctx.reply("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", mainMenu);
});

bot.action(/edit_ad:(.+)/, (ctx) => {
  const adId = ctx.match[1];
  ctx.answerCbQuery();
  // –í—Ö–æ–¥–∏–º–æ –≤ —Å—Ü–µ–Ω—É —ñ –ø–µ—Ä–µ–¥–∞—î–º–æ —ó–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
  ctx.scene.enter("editAdWizard", { adId });
});

bot
  .launch()
  .then(() => {
    console.log("‚úÖ Bot has been started successfully!");
  })
  .catch((err) => {
    console.error("‚ùå Failed to start the bot:", err);
  });

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
